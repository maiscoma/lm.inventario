// frontend/src/pages/ProductsPage.jsx

import { useState, useEffect, useMemo } from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { productService } from "../services/productService";
import LoadingSpinner from "../components/LoadingSpinner";
import MovementModal from "../components/MovementModal";
import toast from "react-hot-toast";
import { Plus, Search, Edit, Trash2, ArrowUpDown, Package } from "lucide-react";

const ProductsPage = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("");
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { isAdmin } = useAuth();

  const fetchProducts = async () => {
    try {
      setLoading(true);
      const response = await productService.getAll();
      if (response.success) {
        setProducts(response.data);
      }
    } catch (error) {
      console.error("Error al cargar productos:", error);
      toast.error("Error al cargar los productos.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleDelete = async (productId, productName) => {
    if (!window.confirm(`¿Estás seguro de que deseas eliminar "${productName}"?`)) {
      return;
    }
    try {
      await productService.delete(productId);
      toast.success("Producto eliminado exitosamente");
      fetchProducts();
    } catch (error) {
      toast.error(error.message || "Error al eliminar el producto");
    }
  };

  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      const search = searchTerm.toLowerCase();
      const matchesSearch =
        product.nombre.toLowerCase().includes(search) ||
        product.sku.toLowerCase().includes(search) ||
        (product.categoria && product.categoria.toLowerCase().includes(search));
      const matchesCategory = !categoryFilter || product.categoria === categoryFilter;
      return matchesSearch && matchesCategory;
    });
  }, [products, searchTerm, categoryFilter]);
  
  const categories = useMemo(() => [...new Set(products.map((p) => p.categoria).filter(Boolean))], [products]);

  const getStockStatus = (stock) => {
    if (!stock) return { color: "text-text-muted", bg: "bg-dark-surface" };
    if (stock.actual <= stock.minimo) {
      return { color: "text-error", bg: "bg-error/20" };
    }
    if (stock.actual > stock.maximo) {
      return { color: "text-warning", bg: "bg-warning/20" };
    }
    return { color: "text-success", bg: "bg-success/20" };
  };

  const formatDate = (timestamp) => {
    if (!timestamp || !timestamp.seconds) return "N/A";
    return new Date(timestamp.seconds * 1000).toLocaleDateString("es-CL");
  };

  const handleOpenMovementModal = (product) => {
    setSelectedProduct(product);
    setIsModalOpen(true);
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-96">
        <LoadingSpinner text="Cargando productos..." size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-text-primary">Gestión de Productos</h1>
          <p className="text-text-secondary mt-1">
            {filteredProducts.length} producto(s) encontrados.
          </p>
        </div>
        <Link to="/products/new" className="bg-gradient-to-r from-primary to-primary-dark text-white px-6 py-3 rounded-lg font-medium hover:shadow-glow hover:-translate-y-0.5 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50 inline-flex items-center gap-2">
          <Plus size={20} />
          <span>Crear Producto</span>
        </Link>
      </div>

      <div className="bg-dark-card border border-dark-border rounded-xl p-6">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
             <Search size={18} className="absolute left-4 top-1/2 -translate-y-1/2 text-text-muted" />
             <input
              type="text"
              placeholder="Buscar por nombre, SKU o categoría..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-4 py-3 pl-11 bg-dark-surface border border-dark-border rounded-lg text-text-primary placeholder-text-muted focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            />
          </div>
          <select value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)} className="w-full sm:w-56 px-4 py-3 bg-dark-surface border border-dark-border rounded-lg text-text-primary focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300">
            <option value="">Todas las categorías</option>
            {categories.map((cat) => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>
        </div>
      </div>
      
      <div className="bg-dark-card border border-dark-border rounded-lg overflow-x-auto">
        <table className="w-full text-sm text-left text-text-secondary">
          <thead className="text-xs uppercase bg-dark-surface">
            <tr>
              <th className="px-6 py-3">Producto</th>
              <th className="px-6 py-3">Categoría</th>
              <th className="px-6 py-3">Stock</th>
              <th className="px-6 py-3">Precio Venta</th>
              <th className="px-6 py-3">Estado</th>
              <th className="px-6 py-3">Fechas</th>
              <th className="px-6 py-3 text-right">Acciones</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.length > 0 ? (
              filteredProducts.map((product) => {
                const stockStatus = getStockStatus(product.stock);
                return (
                  <tr key={product.id} className="border-b border-dark-border hover:bg-dark-surface/50">
                    <td className="px-6 py-4 flex items-center gap-4">
                      <img 
                        src={product.imageUrl || "/placeholder-logo.png"} 
                        alt={product.nombre}
                        className="w-10 h-10 rounded-md object-cover bg-dark-bg"
                      />
                      <div>
                        <div className="font-medium text-text-primary">{product.nombre}</div>
                        <div className="text-xs text-text-muted font-mono">{product.sku}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <span className="px-2 py-1 bg-secondary/20 text-secondary rounded-full text-xs font-semibold">
                        {product.categoria}
                      </span>
                    </td>
                    <td className="px-6 py-4">
                        <div className={`inline-flex items-center gap-2 px-2 py-1 rounded-full text-xs font-semibold ${stockStatus.bg} ${stockStatus.color}`}>
                            {product.stock?.actual || 0}
                        </div>
                    </td>
                    <td className="px-6 py-4 font-medium text-text-primary">
                      ${(product.precios?.venta || 0).toLocaleString("es-CL")}
                    </td>
                    <td className="px-6 py-4">
                      <span className={`px-2 py-1 rounded-full text-xs font-semibold capitalize ${
                        product.estado === 'activo' ? 'bg-success/20 text-success' : 
                        product.estado === 'dañado' ? 'bg-warning/20 text-warning' : 'bg-gray-500/20 text-gray-400'
                      }`}>
                        {product.estado}
                      </span>
                    </td>
                    <td className="px-6 py-4 text-xs">
                      <div>Últ. Mov: {formatDate(product.fechaUltimoMovimiento)}</div>
                      <div className="text-text-muted">Ingreso: {formatDate(product.fechaIngreso)}</div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center justify-end gap-2">
                          <button onClick={() => handleOpenMovementModal(product)} className="p-2 hover:bg-dark-surface rounded-md" title="Registrar Movimiento">
                              <ArrowUpDown size={16} />
                          </button>
                          <Link to={`/products/edit/${product.id}`} className="p-2 hover:bg-dark-surface rounded-md" title="Editar">
                              <Edit size={16} />
                          </Link>
                          {isAdmin() && (
                              <button onClick={() => handleDelete(product.id, product.nombre)} className="p-2 text-error hover:bg-error/10 rounded-md" title="Eliminar">
                                  <Trash2 size={16} />
                              </button>
                          )}
                      </div>
                    </td>
                  </tr>
                )
              })
            ) : (
              <tr>
                <td colSpan="7" className="text-center py-16">
                  <Package size={48} className="mx-auto text-text-muted" />
                  <h3 className="mt-4 text-lg font-semibold">No se encontraron productos</h3>
                  <p className="mt-1 text-text-secondary">
                    {searchTerm || categoryFilter ? "Intenta ajustar tu búsqueda o filtros." : "Crea tu primer producto para comenzar."}
                  </p>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-dark-card border border-dark-border rounded-xl p-6">
          <div className="text-text-secondary text-sm">Total Productos</div>
          <div className="text-2xl font-bold text-text-primary">{products.length}</div>
        </div>
        <div className="bg-dark-card border border-dark-border rounded-xl p-6">
          <div className="text-text-secondary text-sm">Stock Bajo</div>
          <div className="text-2xl font-bold text-error">
            {products.filter((p) => p.stock && p.stock.actual <= p.stock.minimo).length}
          </div>
        </div>
        <div className="bg-dark-card border border-dark-border rounded-xl p-6">
          <div className="text-text-secondary text-sm">Categorías</div>
          <div className="text-2xl font-bold text-text-primary">{categories.length}</div>
        </div>
      </div>

      {isModalOpen && (
        <MovementModal
          product={selectedProduct}
          onClose={() => setIsModalOpen(false)}
          onSuccess={fetchProducts}
        />
      )}
    </div>
  );
};

export default ProductsPage;